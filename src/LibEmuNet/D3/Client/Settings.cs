// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Client {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
  public static partial class Settings {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Client_ToonSettings__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Client.ToonSettings, global::D3.Client.ToonSettings.Builder> internal__static_D3_Client_ToonSettings__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Client_GameAccountSettings__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Client.GameAccountSettings, global::D3.Client.GameAccountSettings.Builder> internal__static_D3_Client_GameAccountSettings__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Settings() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg5TZXR0aW5ncy5wcm90bxIJRDMuQ2xpZW50IiMKDFRvb25TZXR0aW5ncxIT" + 
          "Cgh1aV9mbGFncxgBIAEoDToBMCJOChNHYW1lQWNjb3VudFNldHRpbmdzEhgK" + 
          "DXVzZV9sYXN0X2hlcm8YASABKAU6ATASHQoSc2hvd19vZmZsaW5lX3RvYXN0" + 
          "GAIgASgFOgEw");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Client_ToonSettings__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Client_ToonSettings__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Client.ToonSettings, global::D3.Client.ToonSettings.Builder>(internal__static_D3_Client_ToonSettings__Descriptor,
                new string[] { "UiFlags", });
        internal__static_D3_Client_GameAccountSettings__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Client_GameAccountSettings__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Client.GameAccountSettings, global::D3.Client.GameAccountSettings.Builder>(internal__static_D3_Client_GameAccountSettings__Descriptor,
                new string[] { "UseLastHero", "ShowOfflineToast", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
  public sealed partial class ToonSettings : pb::GeneratedMessage<ToonSettings, ToonSettings.Builder> {
    private static readonly ToonSettings defaultInstance = new Builder().BuildPartial();
    private static readonly string[] _toonSettingsFieldNames = new string[] { "ui_flags" };
    private static readonly uint[] _toonSettingsFieldTags = new uint[] { 8 };
    public static ToonSettings DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ToonSettings DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override ToonSettings ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Client.Settings.internal__static_D3_Client_ToonSettings__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ToonSettings, ToonSettings.Builder> InternalFieldAccessors {
      get { return global::D3.Client.Settings.internal__static_D3_Client_ToonSettings__FieldAccessorTable; }
    }
    
    public const int UiFlagsFieldNumber = 1;
    private bool hasUiFlags;
    private uint uiFlags_;
    public bool HasUiFlags {
      get { return hasUiFlags; }
    }
    public uint UiFlags {
      get { return uiFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _toonSettingsFieldNames;
      if (hasUiFlags) {
        output.WriteUInt32(1, field_names[0], UiFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUiFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, UiFlags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ToonSettings ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ToonSettings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ToonSettings ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ToonSettings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ToonSettings ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ToonSettings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ToonSettings ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ToonSettings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ToonSettings ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ToonSettings ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ToonSettings prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
    public sealed partial class Builder : pb::GeneratedBuilder<ToonSettings, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      ToonSettings result = new ToonSettings();
      
      protected override ToonSettings MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new ToonSettings();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Client.ToonSettings.Descriptor; }
      }
      
      public override ToonSettings DefaultInstanceForType {
        get { return global::D3.Client.ToonSettings.DefaultInstance; }
      }
      
      public override ToonSettings BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        ToonSettings returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ToonSettings) {
          return MergeFrom((ToonSettings) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ToonSettings other) {
        if (other == global::D3.Client.ToonSettings.DefaultInstance) return this;
        if (other.HasUiFlags) {
          UiFlags = other.UiFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_toonSettingsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _toonSettingsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUiFlags = input.ReadUInt32(ref result.uiFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUiFlags {
        get { return result.hasUiFlags; }
      }
      public uint UiFlags {
        get { return result.UiFlags; }
        set { SetUiFlags(value); }
      }
      public Builder SetUiFlags(uint value) {
        result.hasUiFlags = true;
        result.uiFlags_ = value;
        return this;
      }
      public Builder ClearUiFlags() {
        result.hasUiFlags = false;
        result.uiFlags_ = 0;
        return this;
      }
    }
    static ToonSettings() {
      object.ReferenceEquals(global::D3.Client.Settings.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
  public sealed partial class GameAccountSettings : pb::GeneratedMessage<GameAccountSettings, GameAccountSettings.Builder> {
    private static readonly GameAccountSettings defaultInstance = new Builder().BuildPartial();
    private static readonly string[] _gameAccountSettingsFieldNames = new string[] { "show_offline_toast", "use_last_hero" };
    private static readonly uint[] _gameAccountSettingsFieldTags = new uint[] { 16, 8 };
    public static GameAccountSettings DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameAccountSettings DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override GameAccountSettings ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Client.Settings.internal__static_D3_Client_GameAccountSettings__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameAccountSettings, GameAccountSettings.Builder> InternalFieldAccessors {
      get { return global::D3.Client.Settings.internal__static_D3_Client_GameAccountSettings__FieldAccessorTable; }
    }
    
    public const int UseLastHeroFieldNumber = 1;
    private bool hasUseLastHero;
    private int useLastHero_;
    public bool HasUseLastHero {
      get { return hasUseLastHero; }
    }
    public int UseLastHero {
      get { return useLastHero_; }
    }
    
    public const int ShowOfflineToastFieldNumber = 2;
    private bool hasShowOfflineToast;
    private int showOfflineToast_;
    public bool HasShowOfflineToast {
      get { return hasShowOfflineToast; }
    }
    public int ShowOfflineToast {
      get { return showOfflineToast_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameAccountSettingsFieldNames;
      if (hasUseLastHero) {
        output.WriteInt32(1, field_names[1], UseLastHero);
      }
      if (hasShowOfflineToast) {
        output.WriteInt32(2, field_names[0], ShowOfflineToast);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUseLastHero) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, UseLastHero);
        }
        if (hasShowOfflineToast) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, ShowOfflineToast);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameAccountSettings ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameAccountSettings ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameAccountSettings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountSettings ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameAccountSettings prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameAccountSettings, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      GameAccountSettings result = new GameAccountSettings();
      
      protected override GameAccountSettings MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new GameAccountSettings();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Client.GameAccountSettings.Descriptor; }
      }
      
      public override GameAccountSettings DefaultInstanceForType {
        get { return global::D3.Client.GameAccountSettings.DefaultInstance; }
      }
      
      public override GameAccountSettings BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        GameAccountSettings returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameAccountSettings) {
          return MergeFrom((GameAccountSettings) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameAccountSettings other) {
        if (other == global::D3.Client.GameAccountSettings.DefaultInstance) return this;
        if (other.HasUseLastHero) {
          UseLastHero = other.UseLastHero;
        }
        if (other.HasShowOfflineToast) {
          ShowOfflineToast = other.ShowOfflineToast;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameAccountSettingsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameAccountSettingsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUseLastHero = input.ReadInt32(ref result.useLastHero_);
              break;
            }
            case 16: {
              result.hasShowOfflineToast = input.ReadInt32(ref result.showOfflineToast_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUseLastHero {
        get { return result.hasUseLastHero; }
      }
      public int UseLastHero {
        get { return result.UseLastHero; }
        set { SetUseLastHero(value); }
      }
      public Builder SetUseLastHero(int value) {
        result.hasUseLastHero = true;
        result.useLastHero_ = value;
        return this;
      }
      public Builder ClearUseLastHero() {
        result.hasUseLastHero = false;
        result.useLastHero_ = 0;
        return this;
      }
      
      public bool HasShowOfflineToast {
        get { return result.hasShowOfflineToast; }
      }
      public int ShowOfflineToast {
        get { return result.ShowOfflineToast; }
        set { SetShowOfflineToast(value); }
      }
      public Builder SetShowOfflineToast(int value) {
        result.hasShowOfflineToast = true;
        result.showOfflineToast_ = value;
        return this;
      }
      public Builder ClearShowOfflineToast() {
        result.hasShowOfflineToast = false;
        result.showOfflineToast_ = 0;
        return this;
      }
    }
    static GameAccountSettings() {
      object.ReferenceEquals(global::D3.Client.Settings.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
