// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Account {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
  public static partial class Account {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Account_BannerConfiguration__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.BannerConfiguration, global::D3.Account.BannerConfiguration.Builder> internal__static_D3_Account_BannerConfiguration__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_Digest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.Digest, global::D3.Account.Digest.Builder> internal__static_D3_Account_Digest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_SavedDefinition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.SavedDefinition, global::D3.Account.SavedDefinition.Builder> internal__static_D3_Account_SavedDefinition__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Account() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg1BY2NvdW50LnByb3RvEgpEMy5BY2NvdW50GhlBdHRyaWJ1dGVTZXJpYWxp" + 
          "emVyLnByb3RvGgtJdGVtcy5wcm90bxoTT25saW5lU2VydmljZS5wcm90bxoS" + 
          "SXRlbUNyYWZ0aW5nLnByb3RvIpICChNCYW5uZXJDb25maWd1cmF0aW9uEhcK" + 
          "DGJhbm5lcl9pbmRleBgBIAIoDToBMBIVCgpzaWdpbF9tYWluGAIgAigFOgEw" + 
          "EhgKDHNpZ2lsX2FjY2VudBgDIAIoBToCLTESHgoTcGF0dGVybl9jb2xvcl9p" + 
          "bmRleBgEIAIoBToBMBIhChZiYWNrZ3JvdW5kX2NvbG9yX2luZGV4GAUgAigF" + 
          "OgEwEhwKEXNpZ2lsX2NvbG9yX2luZGV4GAYgAigFOgEwEhoKD3BsYWNlbWVu" + 
          "dF9pbmRleBgHIAIoBToBMBISCgdwYXR0ZXJuGAggAigFOgEwEiAKEXVzZV9z" + 
          "aWdpbF92YXJpYW50GAkgAigIOgVmYWxzZSLIAQoGRGlnZXN0Eg8KB3ZlcnNp" + 
          "b24YASACKA0SNwoTbGFzdF9wbGF5ZWRfaGVyb19pZBgCIAIoCzIaLkQzLk9u" + 
          "bGluZVNlcnZpY2UuRW50aXR5SWQSPQoUYmFubmVyX2NvbmZpZ3VyYXRpb24Y" + 
          "AyACKAsyHy5EMy5BY2NvdW50LkJhbm5lckNvbmZpZ3VyYXRpb24SEAoFZmxh" + 
          "Z3MYBCACKA06ATAiIwoFRmxhZ3MSGgoWSEFSRENPUkVfSEVST19VTkxPQ0tF" + 
          "RBABItACCg9TYXZlZERlZmluaXRpb24SDwoHdmVyc2lvbhgBIAIoDRIiCgZk" + 
          "aWdlc3QYAiABKAsyEi5EMy5BY2NvdW50LkRpZ2VzdBJBChBzYXZlZF9hdHRy" + 
          "aWJ1dGVzGAMgAigLMicuRDMuQXR0cmlidXRlU2VyaWFsaXplci5TYXZlZEF0" + 
          "dHJpYnV0ZXMSNQoZbm9ybWFsX3NoYXJlZF9zYXZlZF9pdGVtcxgEIAEoCzIS" + 
          "LkQzLkl0ZW1zLkl0ZW1MaXN0EjcKG2hhcmRjb3JlX3NoYXJlZF9zYXZlZF9p" + 
          "dGVtcxgFIAEoCzISLkQzLkl0ZW1zLkl0ZW1MaXN0Ej0KEmNyYWZ0ZXJfc2F2" + 
          "ZWRfZGF0YRgGIAEoCzIhLkQzLkl0ZW1DcmFmdGluZy5DcmFmdGVyU2F2ZWRE" + 
          "YXRhEhYKDnNlZW5fdHV0b3JpYWxzGAcgAygP");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Account_BannerConfiguration__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Account_BannerConfiguration__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.BannerConfiguration, global::D3.Account.BannerConfiguration.Builder>(internal__static_D3_Account_BannerConfiguration__Descriptor,
                new string[] { "BannerIndex", "SigilMain", "SigilAccent", "PatternColorIndex", "BackgroundColorIndex", "SigilColorIndex", "PlacementIndex", "Pattern", "UseSigilVariant", });
        internal__static_D3_Account_Digest__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Account_Digest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.Digest, global::D3.Account.Digest.Builder>(internal__static_D3_Account_Digest__Descriptor,
                new string[] { "Version", "LastPlayedHeroId", "BannerConfiguration", "Flags", });
        internal__static_D3_Account_SavedDefinition__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_Account_SavedDefinition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.SavedDefinition, global::D3.Account.SavedDefinition.Builder>(internal__static_D3_Account_SavedDefinition__Descriptor,
                new string[] { "Version", "Digest", "SavedAttributes", "NormalSharedSavedItems", "HardcoreSharedSavedItems", "CrafterSavedData", "SeenTutorials", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.AttributeSerializer.AttributeSerializer.Descriptor, 
          global::D3.Items.Items.Descriptor, 
          global::D3.OnlineService.OnlineService.Descriptor, 
          global::D3.ItemCrafting.ItemCrafting.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
  public sealed partial class BannerConfiguration : pb::GeneratedMessage<BannerConfiguration, BannerConfiguration.Builder> {
    private static readonly BannerConfiguration defaultInstance = new Builder().BuildPartial();
    private static readonly string[] _bannerConfigurationFieldNames = new string[] { "background_color_index", "banner_index", "pattern", "pattern_color_index", "placement_index", "sigil_accent", "sigil_color_index", "sigil_main", "use_sigil_variant" };
    private static readonly uint[] _bannerConfigurationFieldTags = new uint[] { 40, 8, 64, 32, 56, 24, 48, 16, 72 };
    public static BannerConfiguration DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BannerConfiguration DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override BannerConfiguration ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_BannerConfiguration__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BannerConfiguration, BannerConfiguration.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_BannerConfiguration__FieldAccessorTable; }
    }
    
    public const int BannerIndexFieldNumber = 1;
    private bool hasBannerIndex;
    private uint bannerIndex_;
    public bool HasBannerIndex {
      get { return hasBannerIndex; }
    }
    public uint BannerIndex {
      get { return bannerIndex_; }
    }
    
    public const int SigilMainFieldNumber = 2;
    private bool hasSigilMain;
    private int sigilMain_;
    public bool HasSigilMain {
      get { return hasSigilMain; }
    }
    public int SigilMain {
      get { return sigilMain_; }
    }
    
    public const int SigilAccentFieldNumber = 3;
    private bool hasSigilAccent;
    private int sigilAccent_ = -1;
    public bool HasSigilAccent {
      get { return hasSigilAccent; }
    }
    public int SigilAccent {
      get { return sigilAccent_; }
    }
    
    public const int PatternColorIndexFieldNumber = 4;
    private bool hasPatternColorIndex;
    private int patternColorIndex_;
    public bool HasPatternColorIndex {
      get { return hasPatternColorIndex; }
    }
    public int PatternColorIndex {
      get { return patternColorIndex_; }
    }
    
    public const int BackgroundColorIndexFieldNumber = 5;
    private bool hasBackgroundColorIndex;
    private int backgroundColorIndex_;
    public bool HasBackgroundColorIndex {
      get { return hasBackgroundColorIndex; }
    }
    public int BackgroundColorIndex {
      get { return backgroundColorIndex_; }
    }
    
    public const int SigilColorIndexFieldNumber = 6;
    private bool hasSigilColorIndex;
    private int sigilColorIndex_;
    public bool HasSigilColorIndex {
      get { return hasSigilColorIndex; }
    }
    public int SigilColorIndex {
      get { return sigilColorIndex_; }
    }
    
    public const int PlacementIndexFieldNumber = 7;
    private bool hasPlacementIndex;
    private int placementIndex_;
    public bool HasPlacementIndex {
      get { return hasPlacementIndex; }
    }
    public int PlacementIndex {
      get { return placementIndex_; }
    }
    
    public const int PatternFieldNumber = 8;
    private bool hasPattern;
    private int pattern_;
    public bool HasPattern {
      get { return hasPattern; }
    }
    public int Pattern {
      get { return pattern_; }
    }
    
    public const int UseSigilVariantFieldNumber = 9;
    private bool hasUseSigilVariant;
    private bool useSigilVariant_;
    public bool HasUseSigilVariant {
      get { return hasUseSigilVariant; }
    }
    public bool UseSigilVariant {
      get { return useSigilVariant_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBannerIndex) return false;
        if (!hasSigilMain) return false;
        if (!hasSigilAccent) return false;
        if (!hasPatternColorIndex) return false;
        if (!hasBackgroundColorIndex) return false;
        if (!hasSigilColorIndex) return false;
        if (!hasPlacementIndex) return false;
        if (!hasPattern) return false;
        if (!hasUseSigilVariant) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _bannerConfigurationFieldNames;
      if (hasBannerIndex) {
        output.WriteUInt32(1, field_names[1], BannerIndex);
      }
      if (hasSigilMain) {
        output.WriteInt32(2, field_names[7], SigilMain);
      }
      if (hasSigilAccent) {
        output.WriteInt32(3, field_names[5], SigilAccent);
      }
      if (hasPatternColorIndex) {
        output.WriteInt32(4, field_names[3], PatternColorIndex);
      }
      if (hasBackgroundColorIndex) {
        output.WriteInt32(5, field_names[0], BackgroundColorIndex);
      }
      if (hasSigilColorIndex) {
        output.WriteInt32(6, field_names[6], SigilColorIndex);
      }
      if (hasPlacementIndex) {
        output.WriteInt32(7, field_names[4], PlacementIndex);
      }
      if (hasPattern) {
        output.WriteInt32(8, field_names[2], Pattern);
      }
      if (hasUseSigilVariant) {
        output.WriteBool(9, field_names[8], UseSigilVariant);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBannerIndex) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, BannerIndex);
        }
        if (hasSigilMain) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, SigilMain);
        }
        if (hasSigilAccent) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, SigilAccent);
        }
        if (hasPatternColorIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, PatternColorIndex);
        }
        if (hasBackgroundColorIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, BackgroundColorIndex);
        }
        if (hasSigilColorIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, SigilColorIndex);
        }
        if (hasPlacementIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, PlacementIndex);
        }
        if (hasPattern) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Pattern);
        }
        if (hasUseSigilVariant) {
          size += pb::CodedOutputStream.ComputeBoolSize(9, UseSigilVariant);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BannerConfiguration ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BannerConfiguration ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BannerConfiguration ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BannerConfiguration prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
    public sealed partial class Builder : pb::GeneratedBuilder<BannerConfiguration, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      BannerConfiguration result = new BannerConfiguration();
      
      protected override BannerConfiguration MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new BannerConfiguration();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.BannerConfiguration.Descriptor; }
      }
      
      public override BannerConfiguration DefaultInstanceForType {
        get { return global::D3.Account.BannerConfiguration.DefaultInstance; }
      }
      
      public override BannerConfiguration BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        BannerConfiguration returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BannerConfiguration) {
          return MergeFrom((BannerConfiguration) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BannerConfiguration other) {
        if (other == global::D3.Account.BannerConfiguration.DefaultInstance) return this;
        if (other.HasBannerIndex) {
          BannerIndex = other.BannerIndex;
        }
        if (other.HasSigilMain) {
          SigilMain = other.SigilMain;
        }
        if (other.HasSigilAccent) {
          SigilAccent = other.SigilAccent;
        }
        if (other.HasPatternColorIndex) {
          PatternColorIndex = other.PatternColorIndex;
        }
        if (other.HasBackgroundColorIndex) {
          BackgroundColorIndex = other.BackgroundColorIndex;
        }
        if (other.HasSigilColorIndex) {
          SigilColorIndex = other.SigilColorIndex;
        }
        if (other.HasPlacementIndex) {
          PlacementIndex = other.PlacementIndex;
        }
        if (other.HasPattern) {
          Pattern = other.Pattern;
        }
        if (other.HasUseSigilVariant) {
          UseSigilVariant = other.UseSigilVariant;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bannerConfigurationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bannerConfigurationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasBannerIndex = input.ReadUInt32(ref result.bannerIndex_);
              break;
            }
            case 16: {
              result.hasSigilMain = input.ReadInt32(ref result.sigilMain_);
              break;
            }
            case 24: {
              result.hasSigilAccent = input.ReadInt32(ref result.sigilAccent_);
              break;
            }
            case 32: {
              result.hasPatternColorIndex = input.ReadInt32(ref result.patternColorIndex_);
              break;
            }
            case 40: {
              result.hasBackgroundColorIndex = input.ReadInt32(ref result.backgroundColorIndex_);
              break;
            }
            case 48: {
              result.hasSigilColorIndex = input.ReadInt32(ref result.sigilColorIndex_);
              break;
            }
            case 56: {
              result.hasPlacementIndex = input.ReadInt32(ref result.placementIndex_);
              break;
            }
            case 64: {
              result.hasPattern = input.ReadInt32(ref result.pattern_);
              break;
            }
            case 72: {
              result.hasUseSigilVariant = input.ReadBool(ref result.useSigilVariant_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBannerIndex {
        get { return result.hasBannerIndex; }
      }
      public uint BannerIndex {
        get { return result.BannerIndex; }
        set { SetBannerIndex(value); }
      }
      public Builder SetBannerIndex(uint value) {
        result.hasBannerIndex = true;
        result.bannerIndex_ = value;
        return this;
      }
      public Builder ClearBannerIndex() {
        result.hasBannerIndex = false;
        result.bannerIndex_ = 0;
        return this;
      }
      
      public bool HasSigilMain {
        get { return result.hasSigilMain; }
      }
      public int SigilMain {
        get { return result.SigilMain; }
        set { SetSigilMain(value); }
      }
      public Builder SetSigilMain(int value) {
        result.hasSigilMain = true;
        result.sigilMain_ = value;
        return this;
      }
      public Builder ClearSigilMain() {
        result.hasSigilMain = false;
        result.sigilMain_ = 0;
        return this;
      }
      
      public bool HasSigilAccent {
        get { return result.hasSigilAccent; }
      }
      public int SigilAccent {
        get { return result.SigilAccent; }
        set { SetSigilAccent(value); }
      }
      public Builder SetSigilAccent(int value) {
        result.hasSigilAccent = true;
        result.sigilAccent_ = value;
        return this;
      }
      public Builder ClearSigilAccent() {
        result.hasSigilAccent = false;
        result.sigilAccent_ = -1;
        return this;
      }
      
      public bool HasPatternColorIndex {
        get { return result.hasPatternColorIndex; }
      }
      public int PatternColorIndex {
        get { return result.PatternColorIndex; }
        set { SetPatternColorIndex(value); }
      }
      public Builder SetPatternColorIndex(int value) {
        result.hasPatternColorIndex = true;
        result.patternColorIndex_ = value;
        return this;
      }
      public Builder ClearPatternColorIndex() {
        result.hasPatternColorIndex = false;
        result.patternColorIndex_ = 0;
        return this;
      }
      
      public bool HasBackgroundColorIndex {
        get { return result.hasBackgroundColorIndex; }
      }
      public int BackgroundColorIndex {
        get { return result.BackgroundColorIndex; }
        set { SetBackgroundColorIndex(value); }
      }
      public Builder SetBackgroundColorIndex(int value) {
        result.hasBackgroundColorIndex = true;
        result.backgroundColorIndex_ = value;
        return this;
      }
      public Builder ClearBackgroundColorIndex() {
        result.hasBackgroundColorIndex = false;
        result.backgroundColorIndex_ = 0;
        return this;
      }
      
      public bool HasSigilColorIndex {
        get { return result.hasSigilColorIndex; }
      }
      public int SigilColorIndex {
        get { return result.SigilColorIndex; }
        set { SetSigilColorIndex(value); }
      }
      public Builder SetSigilColorIndex(int value) {
        result.hasSigilColorIndex = true;
        result.sigilColorIndex_ = value;
        return this;
      }
      public Builder ClearSigilColorIndex() {
        result.hasSigilColorIndex = false;
        result.sigilColorIndex_ = 0;
        return this;
      }
      
      public bool HasPlacementIndex {
        get { return result.hasPlacementIndex; }
      }
      public int PlacementIndex {
        get { return result.PlacementIndex; }
        set { SetPlacementIndex(value); }
      }
      public Builder SetPlacementIndex(int value) {
        result.hasPlacementIndex = true;
        result.placementIndex_ = value;
        return this;
      }
      public Builder ClearPlacementIndex() {
        result.hasPlacementIndex = false;
        result.placementIndex_ = 0;
        return this;
      }
      
      public bool HasPattern {
        get { return result.hasPattern; }
      }
      public int Pattern {
        get { return result.Pattern; }
        set { SetPattern(value); }
      }
      public Builder SetPattern(int value) {
        result.hasPattern = true;
        result.pattern_ = value;
        return this;
      }
      public Builder ClearPattern() {
        result.hasPattern = false;
        result.pattern_ = 0;
        return this;
      }
      
      public bool HasUseSigilVariant {
        get { return result.hasUseSigilVariant; }
      }
      public bool UseSigilVariant {
        get { return result.UseSigilVariant; }
        set { SetUseSigilVariant(value); }
      }
      public Builder SetUseSigilVariant(bool value) {
        result.hasUseSigilVariant = true;
        result.useSigilVariant_ = value;
        return this;
      }
      public Builder ClearUseSigilVariant() {
        result.hasUseSigilVariant = false;
        result.useSigilVariant_ = false;
        return this;
      }
    }
    static BannerConfiguration() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
  public sealed partial class Digest : pb::GeneratedMessage<Digest, Digest.Builder> {
    private static readonly Digest defaultInstance = new Builder().BuildPartial();
    private static readonly string[] _digestFieldNames = new string[] { "banner_configuration", "flags", "last_played_hero_id", "version" };
    private static readonly uint[] _digestFieldTags = new uint[] { 26, 32, 18, 8 };
    public static Digest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Digest DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Digest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_Digest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Digest, Digest.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_Digest__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
      public enum Flags {
        HARDCORE_HERO_UNLOCKED = 1,
      }
      
    }
    #endregion
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private uint version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public uint Version {
      get { return version_; }
    }
    
    public const int LastPlayedHeroIdFieldNumber = 2;
    private bool hasLastPlayedHeroId;
    private global::D3.OnlineService.EntityId lastPlayedHeroId_ = global::D3.OnlineService.EntityId.DefaultInstance;
    public bool HasLastPlayedHeroId {
      get { return hasLastPlayedHeroId; }
    }
    public global::D3.OnlineService.EntityId LastPlayedHeroId {
      get { return lastPlayedHeroId_; }
    }
    
    public const int BannerConfigurationFieldNumber = 3;
    private bool hasBannerConfiguration;
    private global::D3.Account.BannerConfiguration bannerConfiguration_ = global::D3.Account.BannerConfiguration.DefaultInstance;
    public bool HasBannerConfiguration {
      get { return hasBannerConfiguration; }
    }
    public global::D3.Account.BannerConfiguration BannerConfiguration {
      get { return bannerConfiguration_; }
    }
    
    public const int FlagsFieldNumber = 4;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public uint Flags {
      get { return flags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasLastPlayedHeroId) return false;
        if (!hasBannerConfiguration) return false;
        if (!hasFlags) return false;
        if (!LastPlayedHeroId.IsInitialized) return false;
        if (!BannerConfiguration.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _digestFieldNames;
      if (hasVersion) {
        output.WriteUInt32(1, field_names[3], Version);
      }
      if (hasLastPlayedHeroId) {
        output.WriteMessage(2, field_names[2], LastPlayedHeroId);
      }
      if (hasBannerConfiguration) {
        output.WriteMessage(3, field_names[0], BannerConfiguration);
      }
      if (hasFlags) {
        output.WriteUInt32(4, field_names[1], Flags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Version);
        }
        if (hasLastPlayedHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, LastPlayedHeroId);
        }
        if (hasBannerConfiguration) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, BannerConfiguration);
        }
        if (hasFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, Flags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Digest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Digest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Digest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Digest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Digest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Digest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Digest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Digest prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
    public sealed partial class Builder : pb::GeneratedBuilder<Digest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Digest result = new Digest();
      
      protected override Digest MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Digest();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.Digest.Descriptor; }
      }
      
      public override Digest DefaultInstanceForType {
        get { return global::D3.Account.Digest.DefaultInstance; }
      }
      
      public override Digest BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        Digest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Digest) {
          return MergeFrom((Digest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Digest other) {
        if (other == global::D3.Account.Digest.DefaultInstance) return this;
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasLastPlayedHeroId) {
          MergeLastPlayedHeroId(other.LastPlayedHeroId);
        }
        if (other.HasBannerConfiguration) {
          MergeBannerConfiguration(other.BannerConfiguration);
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_digestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _digestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadUInt32(ref result.version_);
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasLastPlayedHeroId) {
                subBuilder.MergeFrom(LastPlayedHeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LastPlayedHeroId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.Account.BannerConfiguration.Builder subBuilder = global::D3.Account.BannerConfiguration.CreateBuilder();
              if (result.hasBannerConfiguration) {
                subBuilder.MergeFrom(BannerConfiguration);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BannerConfiguration = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public uint Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(uint value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasLastPlayedHeroId {
       get { return result.hasLastPlayedHeroId; }
      }
      public global::D3.OnlineService.EntityId LastPlayedHeroId {
        get { return result.LastPlayedHeroId; }
        set { SetLastPlayedHeroId(value); }
      }
      public Builder SetLastPlayedHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasLastPlayedHeroId = true;
        result.lastPlayedHeroId_ = value;
        return this;
      }
      public Builder SetLastPlayedHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasLastPlayedHeroId = true;
        result.lastPlayedHeroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLastPlayedHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.hasLastPlayedHeroId &&
            result.lastPlayedHeroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.lastPlayedHeroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.lastPlayedHeroId_).MergeFrom(value).BuildPartial();
        } else {
          result.lastPlayedHeroId_ = value;
        }
        result.hasLastPlayedHeroId = true;
        return this;
      }
      public Builder ClearLastPlayedHeroId() {
        result.hasLastPlayedHeroId = false;
        result.lastPlayedHeroId_ = global::D3.OnlineService.EntityId.DefaultInstance;
        return this;
      }
      
      public bool HasBannerConfiguration {
       get { return result.hasBannerConfiguration; }
      }
      public global::D3.Account.BannerConfiguration BannerConfiguration {
        get { return result.BannerConfiguration; }
        set { SetBannerConfiguration(value); }
      }
      public Builder SetBannerConfiguration(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasBannerConfiguration = true;
        result.bannerConfiguration_ = value;
        return this;
      }
      public Builder SetBannerConfiguration(global::D3.Account.BannerConfiguration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasBannerConfiguration = true;
        result.bannerConfiguration_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBannerConfiguration(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.hasBannerConfiguration &&
            result.bannerConfiguration_ != global::D3.Account.BannerConfiguration.DefaultInstance) {
            result.bannerConfiguration_ = global::D3.Account.BannerConfiguration.CreateBuilder(result.bannerConfiguration_).MergeFrom(value).BuildPartial();
        } else {
          result.bannerConfiguration_ = value;
        }
        result.hasBannerConfiguration = true;
        return this;
      }
      public Builder ClearBannerConfiguration() {
        result.hasBannerConfiguration = false;
        result.bannerConfiguration_ = global::D3.Account.BannerConfiguration.DefaultInstance;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(uint value) {
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
    }
    static Digest() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
  public sealed partial class SavedDefinition : pb::GeneratedMessage<SavedDefinition, SavedDefinition.Builder> {
    private static readonly SavedDefinition defaultInstance = new Builder().BuildPartial();
    private static readonly string[] _savedDefinitionFieldNames = new string[] { "crafter_saved_data", "digest", "hardcore_shared_saved_items", "normal_shared_saved_items", "saved_attributes", "seen_tutorials", "version" };
    private static readonly uint[] _savedDefinitionFieldTags = new uint[] { 50, 18, 42, 34, 26, 61, 8 };
    public static SavedDefinition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedDefinition DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override SavedDefinition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_SavedDefinition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedDefinition, SavedDefinition.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_SavedDefinition__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private uint version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public uint Version {
      get { return version_; }
    }
    
    public const int DigestFieldNumber = 2;
    private bool hasDigest;
    private global::D3.Account.Digest digest_ = global::D3.Account.Digest.DefaultInstance;
    public bool HasDigest {
      get { return hasDigest; }
    }
    public global::D3.Account.Digest Digest {
      get { return digest_; }
    }
    
    public const int SavedAttributesFieldNumber = 3;
    private bool hasSavedAttributes;
    private global::D3.AttributeSerializer.SavedAttributes savedAttributes_ = global::D3.AttributeSerializer.SavedAttributes.DefaultInstance;
    public bool HasSavedAttributes {
      get { return hasSavedAttributes; }
    }
    public global::D3.AttributeSerializer.SavedAttributes SavedAttributes {
      get { return savedAttributes_; }
    }
    
    public const int NormalSharedSavedItemsFieldNumber = 4;
    private bool hasNormalSharedSavedItems;
    private global::D3.Items.ItemList normalSharedSavedItems_ = global::D3.Items.ItemList.DefaultInstance;
    public bool HasNormalSharedSavedItems {
      get { return hasNormalSharedSavedItems; }
    }
    public global::D3.Items.ItemList NormalSharedSavedItems {
      get { return normalSharedSavedItems_; }
    }
    
    public const int HardcoreSharedSavedItemsFieldNumber = 5;
    private bool hasHardcoreSharedSavedItems;
    private global::D3.Items.ItemList hardcoreSharedSavedItems_ = global::D3.Items.ItemList.DefaultInstance;
    public bool HasHardcoreSharedSavedItems {
      get { return hasHardcoreSharedSavedItems; }
    }
    public global::D3.Items.ItemList HardcoreSharedSavedItems {
      get { return hardcoreSharedSavedItems_; }
    }
    
    public const int CrafterSavedDataFieldNumber = 6;
    private bool hasCrafterSavedData;
    private global::D3.ItemCrafting.CrafterSavedData crafterSavedData_ = global::D3.ItemCrafting.CrafterSavedData.DefaultInstance;
    public bool HasCrafterSavedData {
      get { return hasCrafterSavedData; }
    }
    public global::D3.ItemCrafting.CrafterSavedData CrafterSavedData {
      get { return crafterSavedData_; }
    }
    
    public const int SeenTutorialsFieldNumber = 7;
    private pbc::PopsicleList<int> seenTutorials_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SeenTutorialsList {
      get { return pbc::Lists.AsReadOnly(seenTutorials_); }
    }
    public int SeenTutorialsCount {
      get { return seenTutorials_.Count; }
    }
    public int GetSeenTutorials(int index) {
      return seenTutorials_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasSavedAttributes) return false;
        if (HasDigest) {
          if (!Digest.IsInitialized) return false;
        }
        if (!SavedAttributes.IsInitialized) return false;
        if (HasNormalSharedSavedItems) {
          if (!NormalSharedSavedItems.IsInitialized) return false;
        }
        if (HasHardcoreSharedSavedItems) {
          if (!HardcoreSharedSavedItems.IsInitialized) return false;
        }
        if (HasCrafterSavedData) {
          if (!CrafterSavedData.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savedDefinitionFieldNames;
      if (hasVersion) {
        output.WriteUInt32(1, field_names[6], Version);
      }
      if (hasDigest) {
        output.WriteMessage(2, field_names[1], Digest);
      }
      if (hasSavedAttributes) {
        output.WriteMessage(3, field_names[4], SavedAttributes);
      }
      if (hasNormalSharedSavedItems) {
        output.WriteMessage(4, field_names[3], NormalSharedSavedItems);
      }
      if (hasHardcoreSharedSavedItems) {
        output.WriteMessage(5, field_names[2], HardcoreSharedSavedItems);
      }
      if (hasCrafterSavedData) {
        output.WriteMessage(6, field_names[0], CrafterSavedData);
      }
      if (seenTutorials_.Count > 0) {
        output.WriteSFixed32Array(7, field_names[5], seenTutorials_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Version);
        }
        if (hasDigest) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Digest);
        }
        if (hasSavedAttributes) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, SavedAttributes);
        }
        if (hasNormalSharedSavedItems) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, NormalSharedSavedItems);
        }
        if (hasHardcoreSharedSavedItems) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, HardcoreSharedSavedItems);
        }
        if (hasCrafterSavedData) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, CrafterSavedData);
        }
        {
          int dataSize = 0;
          dataSize = 4 * seenTutorials_.Count;
          size += dataSize;
          size += 1 * seenTutorials_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedDefinition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedDefinition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedDefinition prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavedDefinition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      SavedDefinition result = new SavedDefinition();
      
      protected override SavedDefinition MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new SavedDefinition();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.SavedDefinition.Descriptor; }
      }
      
      public override SavedDefinition DefaultInstanceForType {
        get { return global::D3.Account.SavedDefinition.DefaultInstance; }
      }
      
      public override SavedDefinition BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.seenTutorials_.MakeReadOnly();
        SavedDefinition returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedDefinition) {
          return MergeFrom((SavedDefinition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedDefinition other) {
        if (other == global::D3.Account.SavedDefinition.DefaultInstance) return this;
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasDigest) {
          MergeDigest(other.Digest);
        }
        if (other.HasSavedAttributes) {
          MergeSavedAttributes(other.SavedAttributes);
        }
        if (other.HasNormalSharedSavedItems) {
          MergeNormalSharedSavedItems(other.NormalSharedSavedItems);
        }
        if (other.HasHardcoreSharedSavedItems) {
          MergeHardcoreSharedSavedItems(other.HardcoreSharedSavedItems);
        }
        if (other.HasCrafterSavedData) {
          MergeCrafterSavedData(other.CrafterSavedData);
        }
        if (other.seenTutorials_.Count != 0) {
          base.AddRange(other.seenTutorials_, result.seenTutorials_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savedDefinitionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savedDefinitionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadUInt32(ref result.version_);
              break;
            }
            case 18: {
              global::D3.Account.Digest.Builder subBuilder = global::D3.Account.Digest.CreateBuilder();
              if (result.hasDigest) {
                subBuilder.MergeFrom(Digest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Digest = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.AttributeSerializer.SavedAttributes.Builder subBuilder = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder();
              if (result.hasSavedAttributes) {
                subBuilder.MergeFrom(SavedAttributes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SavedAttributes = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::D3.Items.ItemList.Builder subBuilder = global::D3.Items.ItemList.CreateBuilder();
              if (result.hasNormalSharedSavedItems) {
                subBuilder.MergeFrom(NormalSharedSavedItems);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NormalSharedSavedItems = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::D3.Items.ItemList.Builder subBuilder = global::D3.Items.ItemList.CreateBuilder();
              if (result.hasHardcoreSharedSavedItems) {
                subBuilder.MergeFrom(HardcoreSharedSavedItems);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HardcoreSharedSavedItems = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::D3.ItemCrafting.CrafterSavedData.Builder subBuilder = global::D3.ItemCrafting.CrafterSavedData.CreateBuilder();
              if (result.hasCrafterSavedData) {
                subBuilder.MergeFrom(CrafterSavedData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CrafterSavedData = subBuilder.BuildPartial();
              break;
            }
            case 58:
            case 61: {
              input.ReadSFixed32Array(tag, field_name, result.seenTutorials_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public uint Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(uint value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasDigest {
       get { return result.hasDigest; }
      }
      public global::D3.Account.Digest Digest {
        get { return result.Digest; }
        set { SetDigest(value); }
      }
      public Builder SetDigest(global::D3.Account.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasDigest = true;
        result.digest_ = value;
        return this;
      }
      public Builder SetDigest(global::D3.Account.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasDigest = true;
        result.digest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDigest(global::D3.Account.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.hasDigest &&
            result.digest_ != global::D3.Account.Digest.DefaultInstance) {
            result.digest_ = global::D3.Account.Digest.CreateBuilder(result.digest_).MergeFrom(value).BuildPartial();
        } else {
          result.digest_ = value;
        }
        result.hasDigest = true;
        return this;
      }
      public Builder ClearDigest() {
        result.hasDigest = false;
        result.digest_ = global::D3.Account.Digest.DefaultInstance;
        return this;
      }
      
      public bool HasSavedAttributes {
       get { return result.hasSavedAttributes; }
      }
      public global::D3.AttributeSerializer.SavedAttributes SavedAttributes {
        get { return result.SavedAttributes; }
        set { SetSavedAttributes(value); }
      }
      public Builder SetSavedAttributes(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSavedAttributes = true;
        result.savedAttributes_ = value;
        return this;
      }
      public Builder SetSavedAttributes(global::D3.AttributeSerializer.SavedAttributes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasSavedAttributes = true;
        result.savedAttributes_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSavedAttributes(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.hasSavedAttributes &&
            result.savedAttributes_ != global::D3.AttributeSerializer.SavedAttributes.DefaultInstance) {
            result.savedAttributes_ = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder(result.savedAttributes_).MergeFrom(value).BuildPartial();
        } else {
          result.savedAttributes_ = value;
        }
        result.hasSavedAttributes = true;
        return this;
      }
      public Builder ClearSavedAttributes() {
        result.hasSavedAttributes = false;
        result.savedAttributes_ = global::D3.AttributeSerializer.SavedAttributes.DefaultInstance;
        return this;
      }
      
      public bool HasNormalSharedSavedItems {
       get { return result.hasNormalSharedSavedItems; }
      }
      public global::D3.Items.ItemList NormalSharedSavedItems {
        get { return result.NormalSharedSavedItems; }
        set { SetNormalSharedSavedItems(value); }
      }
      public Builder SetNormalSharedSavedItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasNormalSharedSavedItems = true;
        result.normalSharedSavedItems_ = value;
        return this;
      }
      public Builder SetNormalSharedSavedItems(global::D3.Items.ItemList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasNormalSharedSavedItems = true;
        result.normalSharedSavedItems_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNormalSharedSavedItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.hasNormalSharedSavedItems &&
            result.normalSharedSavedItems_ != global::D3.Items.ItemList.DefaultInstance) {
            result.normalSharedSavedItems_ = global::D3.Items.ItemList.CreateBuilder(result.normalSharedSavedItems_).MergeFrom(value).BuildPartial();
        } else {
          result.normalSharedSavedItems_ = value;
        }
        result.hasNormalSharedSavedItems = true;
        return this;
      }
      public Builder ClearNormalSharedSavedItems() {
        result.hasNormalSharedSavedItems = false;
        result.normalSharedSavedItems_ = global::D3.Items.ItemList.DefaultInstance;
        return this;
      }
      
      public bool HasHardcoreSharedSavedItems {
       get { return result.hasHardcoreSharedSavedItems; }
      }
      public global::D3.Items.ItemList HardcoreSharedSavedItems {
        get { return result.HardcoreSharedSavedItems; }
        set { SetHardcoreSharedSavedItems(value); }
      }
      public Builder SetHardcoreSharedSavedItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasHardcoreSharedSavedItems = true;
        result.hardcoreSharedSavedItems_ = value;
        return this;
      }
      public Builder SetHardcoreSharedSavedItems(global::D3.Items.ItemList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasHardcoreSharedSavedItems = true;
        result.hardcoreSharedSavedItems_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHardcoreSharedSavedItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.hasHardcoreSharedSavedItems &&
            result.hardcoreSharedSavedItems_ != global::D3.Items.ItemList.DefaultInstance) {
            result.hardcoreSharedSavedItems_ = global::D3.Items.ItemList.CreateBuilder(result.hardcoreSharedSavedItems_).MergeFrom(value).BuildPartial();
        } else {
          result.hardcoreSharedSavedItems_ = value;
        }
        result.hasHardcoreSharedSavedItems = true;
        return this;
      }
      public Builder ClearHardcoreSharedSavedItems() {
        result.hasHardcoreSharedSavedItems = false;
        result.hardcoreSharedSavedItems_ = global::D3.Items.ItemList.DefaultInstance;
        return this;
      }
      
      public bool HasCrafterSavedData {
       get { return result.hasCrafterSavedData; }
      }
      public global::D3.ItemCrafting.CrafterSavedData CrafterSavedData {
        get { return result.CrafterSavedData; }
        set { SetCrafterSavedData(value); }
      }
      public Builder SetCrafterSavedData(global::D3.ItemCrafting.CrafterSavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasCrafterSavedData = true;
        result.crafterSavedData_ = value;
        return this;
      }
      public Builder SetCrafterSavedData(global::D3.ItemCrafting.CrafterSavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasCrafterSavedData = true;
        result.crafterSavedData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCrafterSavedData(global::D3.ItemCrafting.CrafterSavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.hasCrafterSavedData &&
            result.crafterSavedData_ != global::D3.ItemCrafting.CrafterSavedData.DefaultInstance) {
            result.crafterSavedData_ = global::D3.ItemCrafting.CrafterSavedData.CreateBuilder(result.crafterSavedData_).MergeFrom(value).BuildPartial();
        } else {
          result.crafterSavedData_ = value;
        }
        result.hasCrafterSavedData = true;
        return this;
      }
      public Builder ClearCrafterSavedData() {
        result.hasCrafterSavedData = false;
        result.crafterSavedData_ = global::D3.ItemCrafting.CrafterSavedData.DefaultInstance;
        return this;
      }
      
      public pbc::IPopsicleList<int> SeenTutorialsList {
        get { return result.seenTutorials_; }
      }
      public int SeenTutorialsCount {
        get { return result.SeenTutorialsCount; }
      }
      public int GetSeenTutorials(int index) {
        return result.GetSeenTutorials(index);
      }
      public Builder SetSeenTutorials(int index, int value) {
        result.seenTutorials_[index] = value;
        return this;
      }
      public Builder AddSeenTutorials(int value) {
        result.seenTutorials_.Add(value);
        return this;
      }
      public Builder AddRangeSeenTutorials(scg::IEnumerable<int> values) {
        base.AddRange(values, result.seenTutorials_);
        return this;
      }
      public Builder ClearSeenTutorials() {
        result.seenTutorials_.Clear();
        return this;
      }
    }
    static SavedDefinition() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
